# Main docker-compose configuration
services:
  # ==================== API GATEWAY ====================
  nginx-gateway:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    env_file:
      - ./.env
    depends_on:
      - main-service
      - auth-service
      - media-service
      - user-permission-gateway
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 5s
      retries: 3
    command: >
      sh -c "envsubst '$$FRONTEND_URL' < /etc/nginx/conf.d/default.conf > /tmp/default.conf && 
             mv /tmp/default.conf /etc/nginx/conf.d/default.conf && 
             nginx -g 'daemon off;'"

  # ==================== MICROSERVICES ====================
  main-service:
    build:
      context: .
      dockerfile: ./main-service/Dockerfile
      target: production
      args:
        PORT: ${MAIN_SERVICE_PORT}
    env_file:
      - ./.env
      - ./main-service/.env
    # Ports removed - only accessible via Nginx Gateway
    depends_on:
      - db
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:${MAIN_SERVICE_PORT}/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  auth-service:
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
      target: production
      args:
        PORT: ${AUTH_SERVICE_PORT}
    env_file:
      - ./.env
      - ./auth-service/.env
    # Ports removed - only accessible via Nginx Gateway
    depends_on:
      - db
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:${AUTH_SERVICE_PORT}/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  media-service:
    build:
      context: .
      dockerfile: ./media-service/Dockerfile
      target: production
      args:
        PORT: ${MEDIA_SERVICE_PORT}
    env_file:
      - ./.env
      - ./media-service/.env
    # Ports removed - only accessible via Nginx Gateway
    depends_on:
      media-db:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:${MEDIA_SERVICE_PORT}/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  user-permission-gateway:
    build:
      context: .
      dockerfile: ./user-permission-gateway/Dockerfile
      target: production
      args:
        PORT: ${USER_PERMISSION_GATEWAY_PORT}
    env_file:
      - ./.env
      - ./user-permission-gateway/.env
    # Ports removed - only accessible via Nginx Gateway
    depends_on:
      db:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:${USER_PERMISSION_GATEWAY_PORT}/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Main Service Database
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT_EXTERNAL}:${DB_PORT_INTERNAL}"
    volumes:
      - main_postgres_data:/var/lib/postgresql/data
    networks:
      - backend-network

  # Media Service Database
  media-db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${MEDIA_DB_NAME}
      POSTGRES_USER: ${MEDIA_DB_USERNAME}
      POSTGRES_PASSWORD: ${MEDIA_DB_PASSWORD}
    ports:
      - "${MEDIA_DB_PORT_EXTERNAL}:${MEDIA_DB_PORT_INTERNAL}"
    volumes:
      - media_postgres_data:/var/lib/postgresql/data
    networks:
      - backend-network

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "${RABBITMQ_PORT_EXTERNAL}:${RABBITMQ_PORT_INTERNAL}"
      - "${RABBITMQ_MANAGEMENT_PORT_EXTERNAL}:${RABBITMQ_MANAGEMENT_PORT_INTERNAL}"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s


volumes:
  main_postgres_data:
  media_postgres_data:
  rabbitmq_data:

networks:
  backend-network:
    driver: bridge
